-- ~/.config/nvim/lua/plugins/lang-java.lua

return {
  -- Enable the LazyVim Java "extra".
  -- This will install and configure nvim-jdtls, nvim-dap, and other Java tools.
  { import = "lazyvim.plugins.extras.lang.java" },

  -- Ensure jdtls is installed by Mason.
  -- While the extra handles this, being explicit can be helpful.
  {
    "williamboman/mason.nvim",
    opts = {
      ensure_installed = {
        "jdtls",
      },
    },
  },

  -- Customize the nvim-jdtls plugin.
  -- This is the primary way to configure the Java Language Server.
  {
    "mfussenegger/nvim-jdtls",
    opts = {
      -- The `jdtls` key within opts is a function that allows modification of the
      -- final configuration passed to nvim-jdtls. This is the correct place
      -- to inject custom settings.
      jdtls = function(opts)
        -- `opts` is the configuration table generated by the LazyVim extra.
        -- We can add or modify its fields.

        --[[ Example: Configure multiple JDK runtimes for projects that require different Java versions.
             This is a common requirement in enterprise environments.
        local home = os.getenv("HOME")
        opts.settings = opts.settings or {}
        opts.settings.java = opts.settings.java or {}
        opts.settings.java.configuration = opts.settings.java.configuration or {}
        opts.settings.java.configuration.runtimes = {
          {
            name = "JavaSE-11",
            path = home.. "/.sdkman/candidates/java/11.0.22-tem",
          },
          {
            name = "JavaSE-17",
            path = home.. "/.sdkman/candidates/java/17.0.10-tem",
          },
          {
            name = "JavaSE-21",
            path = home.. "/.sdkman/candidates/java/21.0.2-tem",
            default = true,
          },
        } 
	]]--

        --[[ Example: Add favorite static members for import completion.
        opts.settings.java.completion = opts.settings.java.completion or {}
        opts.settings.java.completion.favoriteStaticMembers = {
          "org.assertj.core.api.Assertions.*",
          "org.junit.jupiter.api.Assertions.*",
          "org.mockito.Mockito.*",
        }
	]]--
        
        -- Example: Disable format-on-save specifically for Java files if needed,
        -- overriding the global setting. Note: This is an alternative to the autocmd approach.
        -- opts.on_attach = function(client, bufnr)
        --   -- Call the default on_attach function from LazyVim to preserve default keymaps
        --   require("lazyvim.plugins.extras.lang.java").on_attach(client, bufnr)
        --   client.server_capabilities.documentFormattingProvider = false
        --   client.server_capabilities.documentRangeFormattingProvider = false
        -- end

        -- It is crucial to return the modified opts table.
        return opts
      end,
    },
  },
}
